#!/usr/bin/env python3
"""
DALL-E 3 Image Generator for Security Quest Game
Generates 20 unique images based on the game's image prompts
"""

import os
import requests
from openai import OpenAI
from dotenv import load_dotenv
import json
import time

# Load environment variables
load_dotenv()

# Initialize OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Image prompts from the game (extracted from game.js)
image_prompts = [
    {
        "id": 1,
        "scene_title": "Βιβλιοθήκη Γνώσης",
        "prompt": "8-bit pixel art, grand library interior filled with towering bookshelves, ένας σοφός γέροντας σοφός NPC κρατά ένα μεγάλο ανοικτό βιβλίο γνώσης ασφαλείας (το σύμβολο των Top 10 ευπαθειών), ο ήρωας στέκεται απέναντί του και ακούει προσεκτικά, ατμόσφαιρα σοβαρή και μυστηριώδης, στυλ κλασικού retro adventure παιχνιδιού."
    },
    {
        "id": 2,
        "scene_title": "Κάστρο - Ελαττωματικός Έλεγχος Πρόσβασης",
        "prompt": "8-bit pixel art, μπροστά από πύλη κάστρου με φρουρό NPC που φυλάει την κλειδωμένη είσοδο, ένας πονηρός rogue NPC γλιστρά από μια πλαϊνή ξεκλείδωτη πόρτα πίσω από τον φρουρό (συμβολίζοντας παραβίαση πρόσβασης), ο ήρωας το παρατηρεί έκπληκτος, μεσαιωνικό σκηνικό περιπέτειας σε ρετρό στυλ."
    },
    {
        "id": 3,
        "scene_title": "Θησαυροφυλάκιο - Κρυπτογραφικές Αποτυχίες",
        "prompt": "8-bit pixel art, εσωτερικό θησαυροφυλακίου με μια μεγάλη ανοιχτή χρηματοκιβώτιο, η κλειδαριά του είναι σπασμένη και δεδομένα (χρυσά νομίσματα ή έγγραφα) ξεχειλίζουν προς τα έξω, ένας ανήσυχος NPC κρυπτογράφος στέκεται δίπλα δείχνοντας την αποτυχία (ασθενή κρυπτογράφηση), ο ήρωας κοιτάζει προβληματισμένος, retro adventure στυλ σκηνικού."
    },
    {
        "id": 4,
        "scene_title": "Πύλη Εισόδου - Αυθεντικοποίηση vs Εξουσιοδότηση",
        "prompt": "8-bit pixel art, αυλή κάστρου με κεντρική πύλη, ένας φρουρός NPC ελέγχει ένα πάπυρο-ταυτότητα του ήρωα στην είσοδο (αυθεντικοποίηση), πίσω του υπάρχει δεύτερη θύρα με πινακίδα \"Μόνο Εξουσιοδοτημένοι\" που οδηγεί σε θησαυροφυλάκιο (εξουσιοδότηση), δείχνοντας τη διαφορά μεταξύ ελέγχου ταυτότητας και δικαιωμάτων πρόσβασης, ρετρό στυλ περιπέτειας."
    },
    {
        "id": 5,
        "scene_title": "Θησαυροφυλάκιο με Διπλή Κλειδαριά",
        "prompt": "8-bit pixel art, μια μαγική πόρτα θησαυροφυλακίου με δύο κλειδαριές, η μία είναι παραδοσιακή κλειδαριά για κλειδί και η άλλη είναι ένας σαρωτής αποτυπώματος χεριού, ένας σοφός μέντορας NPC εξηγεί στον ήρωα ότι χρειάζονται και τα δύο για να ανοίξει (δύο παράγοντες αυθεντικοποίησης), τονίζοντας την πολυπαραγοντική ασφάλεια, retro adventure αισθητική."
    },
    {
        "id": 6,
        "scene_title": "Νυχτερινή Πόλη - Ασφαλής Σύνδεση",
        "prompt": "8-bit pixel art, νυχτερινό αστικό τοπίο με γραμμές δεδομένων να συνδέουν τον υπολογιστή του ήρωα με έναν απομακρυσμένο server-κτίριο, η μία γραμμή είναι χωρίς κρυπτογράφηση (κόκκινη, με ένα κακόβουλο hacker NPC να υποκλέπτει στη μέση), μια δεύτερη παράλληλη γραμμή είναι ασφαλής (μπλε με εικονίδιο κλειδαριάς, ο hacker μένει απ' έξω θυμωμένος), ένας φρουρός κυβερνοασφάλειας NPC δείχνει στον ήρωα το ασφαλές μονοπάτι \"HTTPS\", σκηνικό cyberpunk retro ύφους."
    },
    {
        "id": 7,
        "scene_title": "Δικαστική Αίθουσα - Αρχές GDPR",
        "prompt": "8-bit pixel art, εσωτερικό δικαστικής αίθουσας ή συμβουλίου, ένας δικαστής NPC με τηβέννο στέκεται έδρα κρατώντας έναν μεγάλο πάπυρο με κανόνες (αρχές προστασίας δεδομένων του GDPR), δείχνει αυστηρά προς τον ήρωα που στέκεται μπροστά και ακούει με σεβασμό, ατμόσφαιρα σοβαρή που υποδηλώνει τη σημασία των νόμων, retro adventure στυλ."
    },
    {
        "id": 8,
        "scene_title": "Σχεδιαστικό Γραφείο - Privacy by Design",
        "prompt": "8-bit pixel art, εργαστήριο αρχιτεκτονικής με σχέδια και γρανάζια διάσπαρτα, ένας αρχιτέκτονας NPC σχεδιάζει πάνω σε έναν μπλε εκτυπωμένο χάρτη μια εφαρμογή όπου εμφανίζεται ένα έμβλημα ασπίδας στο κέντρο (προστασία δεδομένων από τον σχεδιασμό), ο ήρωας παρακολουθεί συλλογισμένος, ρετρό στυλ περιπέτειας."
    },
    {
        "id": 9,
        "scene_title": "Δικαστήριο - Συνέπειες Μη Συμμόρφωσης",
        "prompt": "8-bit pixel art, σκηνή σε δικαστική αίθουσα ή γραφείο ρυθμιστικής αρχής, ένας αυστηρός δικαστής ή αξιωματούχος NPC κρατά ένα τεράστιο έγγραφο προστίμου (συμβολίζει πολλά εκατομμύρια €) και δείχνει επιτιμητικά, ο ήρωας στέκεται μπροστά τρομαγμένος, υπογραμμίζοντας τις βαριές κυρώσεις για μη συμμόρφωση και την υποχρέωση αναφοράς παραβίασης, retro adventure ύφος."
    },
    {
        "id": 10,
        "scene_title": "Εργαστήριο Ελέγχων Ασφάλειας",
        "prompt": "8-bit pixel art, high-tech εργαστήριο δοκιμών ασφάλειας. Τρεις διαφορετικοί NPC δοκιμαστές επιδεικνύουν μεθόδους: ένας διαβάζει προσεκτικά κώδικα σε πάπυρους (στατική ανάλυση κώδικα – SAST), άλλος δοκιμάζει ενεργά μια τερματική/υπολογιστή με εργαλεία (δυναμικός έλεγχος – DAST), και ένας φιγουρίνιος ηθικός hacker NPC προσπαθεί να διαρρήξει έναν server με εργαλεία (penetration test). Ο ήρωας στέκει στο κέντρο παρατηρώντας όλα τα είδη ελέγχων, σκηνικό ρετρό περιπέτειας."
    },
    {
        "id": 11,
        "scene_title": "Αίθουσα Στρατηγικής - Εκτίμηση Κινδύνων",
        "prompt": "8-bit pixel art, δωμάτιο στρατηγικής με χάρτες και διαγράμματα κινδύνων στους τοίχους. Ένας αναλυτής κινδύνων NPC δείχνει σε έναν χάρτη που μαρκάρει σημαντικά assets και εικονίδια απειλών, συζητά την πιθανότητα και την επίπτωση με τον ήρωα πάνω από ένα τραπέζι γεμάτο έγγραφα. Η προτεραιοποίηση των κινδύνων φαίνεται από τις σημειώσεις. Retro στυλ σκηνικού περιπέτειας."
    },
    {
        "id": 12,
        "scene_title": "Μάχη στο Κάστρο - Εστίαση σε Μεγάλους Κινδύνους",
        "prompt": "8-bit pixel art, επικά τείχη κάστρου δέχονται επίθεση. Ένας τεράστιος δράκος (μεγάλη απειλή) πλησιάζει επιθετικά τα τείχη ενώ λίγα μικρά goblins (μικρότερα ζητήματα) τριγυρνούν κάτω. Ένας αρχηγός φρουράς (captain) NPC φωνάζει και δείχνει στον ήρωα να επικεντρωθεί πρώτα στον δράκο (υψηλού κινδύνου ευπάθεια) αφήνοντας τα goblins για μετά. Επικό φανταστικό σκηνικό σε ρετρό pixel art στυλ."
    },
    {
        "id": 13,
        "scene_title": "Αιωρούμενα Νησιά - Επιλογές Φιλοξενίας",
        "prompt": "8-bit pixel art, σκηνικό ουρανού με τρία αιωρούμενα νησιά που αντιπροσωπεύουν επιλογές hosting. Το ένα νησί έχει ένα οχυρό-κάστρο (ιδιόκτητο data center on-premises), το δεύτερο έχει ένα κυβερνητικό κτίριο πάνω σε σύννεφο (κυβερνητικό cloud), και το τρίτο ένα μοντέρνο τεχνολογικό πόλη-νησί στα σύννεφα (πιστοποιημένο δημόσιο cloud). Ένας οδηγός/σύμβουλος NPC στέκεται δίπλα στον ήρωα σε μια ιπτάμενη πλατφόρμα, δείχνοντας προς κάθε επιλογή και εξηγώντας, retro φανταστικό στυλ."
    },
    {
        "id": 14,
        "scene_title": "Εργοστάσιο Λογισμικού - Αυτοματισμοί CI/CD",
        "prompt": "8-bit pixel art, εσωτερικό ενός αυτοματοποιημένου εργοστασίου λογισμικού. Ένας κινούμενος μεταφορικός ιμάντας μεταφέρει κουτιά κώδικα μέσα από σταθμούς δοκιμής και ανάπτυξης με ρομποτικούς βραχίονες να δουλεύουν πάνω τους. Ένας μηχανικός NPC παρακολουθεί τις διαδικασίες και εξηγεί στον ήρωα πώς λειτουργεί η γραμμή CI/CD που μειώνει τα ανθρώπινα λάθη. Όλα λειτουργούν ρολόι σε ρετρό βιομηχανικό pixel art περιβάλλον."
    },
    {
        "id": 15,
        "scene_title": "Αγώνας Ταχύτητας - Βελτιστοποίηση Επιδόσεων",
        "prompt": "8-bit pixel art, ψηφιακή πίστα αγώνων ταχύτητας. Στη μία λωρίδα τρέχει ένας κομψός server-χαρακτήρας με ταχύτητα (βελτιστοποιημένη εφαρμογή), στην άλλη λωρίδα ένας αργός παλιός υπολογιστής-χαρακτήρας μένει πίσω με ιδρώτα. Θεατές NPC (πολίτες) ζητωκραυγάζουν τον γρήγορο και δυσανασχετούν με τον αργό. Ένας προπονητής NPC στέκεται με τον ήρωα στην άκρη της πίστας εξηγώντας πόσο σημαντική είναι η ταχύτητα για την επιτυχία. Retro arcade στυλ σκηνικού."
    },
    {
        "id": 16,
        "scene_title": "Βιβλιοθήκη Αρχείων - Τεκμηρίωση",
        "prompt": "8-bit pixel art, σκονισμένο αρχείο/βιβλιοθήκη με ράφια γεμάτα φακέλους και εγχειρίδια. Ένας σοφός αρχειοφύλακας NPC δείχνει στον ήρωα ένα καλά οργανωμένο ράφι με την ένδειξη \"Τεκμηρίωση Συστήματος\". Σε μια γωνία φαίνεται μια παλιά υπολογιστική μηχανή που ακόμα λειτουργεί χάρη στα διατηρημένα εγχειρίδια. Η σκηνή τονίζει τη συνέχεια και ασφάλεια που παρέχει η πλήρης τεκμηρίωση, σε ρετρό pixel art ύφος."
    },
    {
        "id": 17,
        "scene_title": "Εργαστήριο Συντήρησης - Προγραμματισμός",
        "prompt": "8-bit pixel art, συνεργείο συντήρησης με μηχανήματα. Ένας μηχανικός NPC στέκει δίπλα σε μια μηχανή (που συμβολίζει την εφαρμογή) και σε έναν πίνακα ανακοινώσεων/ημερολόγιο με σημειωμένες προγραμματισμένες ημερομηνίες συντήρησης. Κοντά υπάρχει ένα αναμμένο κόκκινο λαμπάκι ή σπασμένο γρανάζι που υποδηλώνει έκτακτη βλάβη. Ο ήρωας στέκεται δίπλα του παρακολουθώντας, κατανοώντας τη σημασία του τακτικού προγραμματισμού αλλά και της ετοιμότητας για απρόβλεπτες επισκευές. Retro στυλ σκηνικού."
    },
    {
        "id": 18,
        "scene_title": "Κέντρο Ελέγχου - Διαχείριση Αλλαγών",
        "prompt": "8-bit pixel art, αίθουσα ελέγχου τεχνολογίας. Ένας μηχανικός NPC σε κονσόλα είναι έτοιμος να εφαρμόσει μια αλλαγή λογισμικού, πρώτα όμως τη δοκιμάζει σε έναν ξεχωριστό δοκιμαστικό server που είναι πιστό αντίγραφο του παραγωγικού (υπάρχει πινακίδα \"Test Environment\"), ενώ μια ασφαλισμένη πόρτα με την ένδειξη \"Production\" βρίσκεται πιο πέρα. Δίπλα, ένας άλλος NPC καταγράφει αλλαγές σε ένα μεγάλο βιβλίο (αρχείο αλλαγών). Ο ήρωας παρατηρεί προσεκτικά αυτήν τη μεθοδική διαδικασία, που υπογραμμίζει την ασφαλή διαχείριση αλλαγών, σε ρετρό στυλ."
    },
    {
        "id": 19,
        "scene_title": "Αίθουσα Συσκέψεων - Προϋποθέσεις Έργου",
        "prompt": "8-bit pixel art, αίθουσα συσκέψεων με ένα μεγάλο στρογγυλό τραπέζι. Ένας διευθυντής έργου NPC στέκεται όρθιος με μια λίστα που τιτλοφορείται \"Απαιτήσεις Ασφαλείας\" πάνω στο τραπέζι. Γύρω κάθονται διάφοροι συμμετέχοντες NPC – ένας προγραμματιστής, ένας υπεύθυνος ασφαλείας, ένας εκπρόσωπος δημοσίου φορέα, ακόμα και ένας πολίτης-χρήστης – όλοι συμμετέχουν στη συζήτηση. Ο ήρωας (ως αναλυτής ασφαλείας) βρίσκεται κι αυτός στο τραπέζι, διασφαλίζοντας ότι οι απαιτήσεις είναι σαφείς και όλοι οι ενδιαφερόμενοι συνεργάζονται. Σκηνικό ρετρό adventure ύφους που δείχνει ομαδική εργασία."
    },
    {
        "id": 20,
        "scene_title": "Ασφαλής Πόλη - Εμπιστοσύνη Πολιτών",
        "prompt": "8-bit pixel art, μια φωτεινή ψηφιακή πόλη του μέλλοντος. Ένας διάφανος θόλος-ασπίδα με εικονίδιο κλειδαριάς προστατεύει την πόλη, συμβολίζοντας την ασφάλεια. Πολίτες-χαρούμενοι NPCs κινούνται στην πόλη χρησιμοποιώντας υπολογιστές και ψηφιακές υπηρεσίες με χαμόγελο εμπιστοσύνης. Ο ήρωας στέκεται δίπλα σε έναν επίσημο εκπρόσωπο NPC της κυβέρνησης στην άκρη, και κοιτάζουν περήφανοι το αποτέλεσμα – αξιόπιστες, ασφαλείς ψηφιακές υπηρεσίες που εμπνέουν εμπιστοσύνη στους πολίτες. Τελική σκηνή με θριαμβευτικό, ρετρό pixel art ύφος."
    }
]

def create_image_directory():
    """Create images directory if it doesn't exist"""
    image_dir = "images"
    if not os.path.exists(image_dir):
        os.makedirs(image_dir)
        print(f"Created directory: {image_dir}")
    return image_dir

def generate_image(prompt, image_id, image_dir):
    """Generate a single image using DALL-E 3"""
    try:
        filename = f"scene_{image_id:02d}.png"
        filepath = os.path.join(image_dir, filename)
        
        # Check if image already exists
        if os.path.exists(filepath):
            print(f"⏭️  Skipping image {image_id}/20: {filename} already exists")
            return {"status": "skipped", "filepath": filepath}
            
        print(f"🎨 Generating image {image_id}/20: {prompt[:60]}...")
        
        # Generate image using DALL-E 3
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024",
            quality="standard",
            style="natural"
        )
        
        # Get the image URL
        image_url = response.data[0].url
        
        # Download the image
        image_response = requests.get(image_url)
        if image_response.status_code == 200:
            with open(filepath, "wb") as f:
                f.write(image_response.content)
            
            print(f"✅ Saved: {filename}")
            return {"status": "generated", "filepath": filepath}
        else:
            print(f"❌ Failed to download image {image_id}")
            return {"status": "failed", "filepath": None}
            
    except Exception as e:
        print(f"❌ Error generating image {image_id}: {str(e)}")
        return {"status": "failed", "filepath": None}

def main():
    """Main function to generate all images"""
    # Check if OpenAI API key is set
    if not os.getenv("OPENAI_API_KEY"):
        print("❌ Error: OPENAI_API_KEY not found in environment variables")
        print("Please create a .env file with your OpenAI API key:")
        print("OPENAI_API_KEY=your_api_key_here")
        return
    
    # Create images directory
    image_dir = create_image_directory()
    
    print(f"🎨 Starting image generation for {len(image_prompts)} scenes...")
    print("=" * 60)
    
    successful_images = 0
    failed_images = 0
    skipped_images = 0
    
    for prompt_data in image_prompts:
        image_id = prompt_data["id"]
        prompt = prompt_data["prompt"]
        
        # Generate image
        result = generate_image(prompt, image_id, image_dir)
        
        if result["status"] == "generated":
            successful_images += 1
            # Add delay to avoid rate limiting
            time.sleep(2)
        elif result["status"] == "skipped":
            skipped_images += 1
        else:
            failed_images += 1
    
    print("=" * 60)
    print(f"🎉 Image generation complete!")
    print(f"✅ Generated: {successful_images}")
    print(f"⏭️  Skipped: {skipped_images}")
    print(f"❌ Failed: {failed_images}")
    print(f"📁 Images saved to: {image_dir}/")
    
    # Show cost estimate
    if successful_images > 0:
        estimated_cost = successful_images * 0.040
        print(f"💰 Estimated cost: ${estimated_cost:.2f}")
    
    print("\nNext steps:")
    print("1. Check the generated images in the images/ folder")
    print("2. Run the game to see the new images in action!")
    print("3. If any images failed, you can run this script again")

if __name__ == "__main__":
    main() 